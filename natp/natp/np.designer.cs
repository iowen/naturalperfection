#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace natp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="np")]
	public partial class npDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertWorkSchedule(WorkSchedule instance);
    partial void UpdateWorkSchedule(WorkSchedule instance);
    partial void DeleteWorkSchedule(WorkSchedule instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertApplicationRole(ApplicationRole instance);
    partial void UpdateApplicationRole(ApplicationRole instance);
    partial void DeleteApplicationRole(ApplicationRole instance);
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertAppointmentComment(AppointmentComment instance);
    partial void UpdateAppointmentComment(AppointmentComment instance);
    partial void DeleteAppointmentComment(AppointmentComment instance);
    partial void InsertAppointmentNote(AppointmentNote instance);
    partial void UpdateAppointmentNote(AppointmentNote instance);
    partial void DeleteAppointmentNote(AppointmentNote instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertDesigner(Designer instance);
    partial void UpdateDesigner(Designer instance);
    partial void DeleteDesigner(Designer instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertPhotoAlbum(PhotoAlbum instance);
    partial void UpdatePhotoAlbum(PhotoAlbum instance);
    partial void DeletePhotoAlbum(PhotoAlbum instance);
    partial void InsertPhotoAlbumItem(PhotoAlbumItem instance);
    partial void UpdatePhotoAlbumItem(PhotoAlbumItem instance);
    partial void DeletePhotoAlbumItem(PhotoAlbumItem instance);
    partial void InsertUserClaim(UserClaim instance);
    partial void UpdateUserClaim(UserClaim instance);
    partial void DeleteUserClaim(UserClaim instance);
    partial void InsertUserLogin(UserLogin instance);
    partial void UpdateUserLogin(UserLogin instance);
    partial void DeleteUserLogin(UserLogin instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    #endregion
		
		public npDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public npDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public npDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public npDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public npDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<WorkSchedule> WorkSchedules
		{
			get
			{
				return this.GetTable<WorkSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationRole> ApplicationRoles
		{
			get
			{
				return this.GetTable<ApplicationRole>();
			}
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<AppointmentComment> AppointmentComments
		{
			get
			{
				return this.GetTable<AppointmentComment>();
			}
		}
		
		public System.Data.Linq.Table<AppointmentNote> AppointmentNotes
		{
			get
			{
				return this.GetTable<AppointmentNote>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Designer> Designers
		{
			get
			{
				return this.GetTable<Designer>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<PhotoAlbum> PhotoAlbums
		{
			get
			{
				return this.GetTable<PhotoAlbum>();
			}
		}
		
		public System.Data.Linq.Table<PhotoAlbumItem> PhotoAlbumItems
		{
			get
			{
				return this.GetTable<PhotoAlbumItem>();
			}
		}
		
		public System.Data.Linq.Table<UserClaim> UserClaims
		{
			get
			{
				return this.GetTable<UserClaim>();
			}
		}
		
		public System.Data.Linq.Table<UserLogin> UserLogins
		{
			get
			{
				return this.GetTable<UserLogin>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _PasswordHash;
		
		private bool _EmailConfirmed;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private string _UserId;
		
		private System.DateTime _DateCreatedUtc;
		
		private System.Nullable<System.DateTime> _DateLastUpdatedUtc;
		
		private System.Nullable<int> _LastUpdatedBy;
		
		private System.Nullable<bool> _TwoFactorEnabled;
		
		private System.Nullable<int> _AccessFailedCount;
		
		private string _Discriminator;
		
		private bool _IsActive;
		
		private System.Nullable<int> _AddressId;
		
		private string _Email1;
		
		private EntitySet<AppointmentComment> _AppointmentComments;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Designer> _Designers;
		
		private EntitySet<Photo> _Photos;
		
		private EntitySet<UserClaim> _UserClaims;
		
		private EntitySet<UserLogin> _UserLogins;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnDateCreatedUtcChanging(System.DateTime value);
    partial void OnDateCreatedUtcChanged();
    partial void OnDateLastUpdatedUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnDateLastUpdatedUtcChanged();
    partial void OnLastUpdatedByChanging(System.Nullable<int> value);
    partial void OnLastUpdatedByChanged();
    partial void OnTwoFactorEnabledChanging(System.Nullable<bool> value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnAccessFailedCountChanging(System.Nullable<int> value);
    partial void OnAccessFailedCountChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnAddressIdChanging(System.Nullable<int> value);
    partial void OnAddressIdChanged();
    partial void OnEmail1Changing(string value);
    partial void OnEmail1Changed();
    #endregion
		
		public Account()
		{
			this._AppointmentComments = new EntitySet<AppointmentComment>(new Action<AppointmentComment>(this.attach_AppointmentComments), new Action<AppointmentComment>(this.detach_AppointmentComments));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Designers = new EntitySet<Designer>(new Action<Designer>(this.attach_Designers), new Action<Designer>(this.detach_Designers));
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._UserClaims = new EntitySet<UserClaim>(new Action<UserClaim>(this.attach_UserClaims), new Action<UserClaim>(this.detach_UserClaims));
			this._UserLogins = new EntitySet<UserLogin>(new Action<UserLogin>(this.attach_UserLogins), new Action<UserLogin>(this.detach_UserLogins));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreatedUtc", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreatedUtc
		{
			get
			{
				return this._DateCreatedUtc;
			}
			set
			{
				if ((this._DateCreatedUtc != value))
				{
					this.OnDateCreatedUtcChanging(value);
					this.SendPropertyChanging();
					this._DateCreatedUtc = value;
					this.SendPropertyChanged("DateCreatedUtc");
					this.OnDateCreatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLastUpdatedUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateLastUpdatedUtc
		{
			get
			{
				return this._DateLastUpdatedUtc;
			}
			set
			{
				if ((this._DateLastUpdatedUtc != value))
				{
					this.OnDateLastUpdatedUtcChanging(value);
					this.SendPropertyChanging();
					this._DateLastUpdatedUtc = value;
					this.SendPropertyChanged("DateLastUpdatedUtc");
					this.OnDateLastUpdatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int")]
		public System.Nullable<int> LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit")]
		public System.Nullable<bool> TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int")]
		public System.Nullable<int> AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="NChar(100)")]
		public string Discriminator
		{
			get
			{
				return this._Discriminator;
			}
			set
			{
				if ((this._Discriminator != value))
				{
					this.OnDiscriminatorChanging(value);
					this.SendPropertyChanging();
					this._Discriminator = value;
					this.SendPropertyChanged("Discriminator");
					this.OnDiscriminatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int")]
		public System.Nullable<int> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email1", DbType="NVarChar(128)")]
		public string Email1
		{
			get
			{
				return this._Email1;
			}
			set
			{
				if ((this._Email1 != value))
				{
					this.OnEmail1Changing(value);
					this.SendPropertyChanging();
					this._Email1 = value;
					this.SendPropertyChanged("Email1");
					this.OnEmail1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AppointmentComment", Storage="_AppointmentComments", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<AppointmentComment> AppointmentComments
		{
			get
			{
				return this._AppointmentComments;
			}
			set
			{
				this._AppointmentComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Client", Storage="_Clients", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Designer", Storage="_Designers", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Designer> Designers
		{
			get
			{
				return this._Designers;
			}
			set
			{
				this._Designers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Photo", Storage="_Photos", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserClaim", Storage="_UserClaims", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserClaim> UserClaims
		{
			get
			{
				return this._UserClaims;
			}
			set
			{
				this._UserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserLogin", Storage="_UserLogins", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserLogin> UserLogins
		{
			get
			{
				return this._UserLogins;
			}
			set
			{
				this._UserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserRole", Storage="_UserRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppointmentComments(AppointmentComment entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AppointmentComments(AppointmentComment entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Designers(Designer entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Designers(Designer entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_UserClaims(UserClaim entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_UserClaims(UserClaim entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_UserLogins(UserLogin entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_UserLogins(UserLogin entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkSchedule")]
	public partial class WorkSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkScheduleId;
		
		private int _DesignerId;
		
		private string _Location;
		
		private string _ClosedDatesLocation;
		
		private EntityRef<Designer> _Designer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkScheduleIdChanging(int value);
    partial void OnWorkScheduleIdChanged();
    partial void OnDesignerIdChanging(int value);
    partial void OnDesignerIdChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnClosedDatesLocationChanging(string value);
    partial void OnClosedDatesLocationChanged();
    #endregion
		
		public WorkSchedule()
		{
			this._Designer = default(EntityRef<Designer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkScheduleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkScheduleId
		{
			get
			{
				return this._WorkScheduleId;
			}
			set
			{
				if ((this._WorkScheduleId != value))
				{
					this.OnWorkScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._WorkScheduleId = value;
					this.SendPropertyChanged("WorkScheduleId");
					this.OnWorkScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignerId", DbType="Int NOT NULL")]
		public int DesignerId
		{
			get
			{
				return this._DesignerId;
			}
			set
			{
				if ((this._DesignerId != value))
				{
					if (this._Designer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignerIdChanging(value);
					this.SendPropertyChanging();
					this._DesignerId = value;
					this.SendPropertyChanged("DesignerId");
					this.OnDesignerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDatesLocation", DbType="NVarChar(250)")]
		public string ClosedDatesLocation
		{
			get
			{
				return this._ClosedDatesLocation;
			}
			set
			{
				if ((this._ClosedDatesLocation != value))
				{
					this.OnClosedDatesLocationChanging(value);
					this.SendPropertyChanging();
					this._ClosedDatesLocation = value;
					this.SendPropertyChanged("ClosedDatesLocation");
					this.OnClosedDatesLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designer_WorkSchedule", Storage="_Designer", ThisKey="DesignerId", OtherKey="DesignerId", IsForeignKey=true)]
		public Designer Designer
		{
			get
			{
				return this._Designer.Entity;
			}
			set
			{
				Designer previousValue = this._Designer.Entity;
				if (((previousValue != value) 
							|| (this._Designer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designer.Entity = null;
						previousValue.WorkSchedules.Remove(this);
					}
					this._Designer.Entity = value;
					if ((value != null))
					{
						value.WorkSchedules.Add(this);
						this._DesignerId = value.DesignerId;
					}
					else
					{
						this._DesignerId = default(int);
					}
					this.SendPropertyChanged("Designer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressId;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _Phone;
		
		private string _AlernatePhone;
		
		private string _Fax;
		
		private System.DateTime _DateCreatedUtc;
		
		private System.Nullable<System.DateTime> _DateLastUpdatedUtc;
		
		private System.Nullable<int> _LastUpdatedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAlernatePhoneChanging(string value);
    partial void OnAlernatePhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnDateCreatedUtcChanging(System.DateTime value);
    partial void OnDateCreatedUtcChanged();
    partial void OnDateLastUpdatedUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnDateLastUpdatedUtcChanged();
    partial void OnLastUpdatedByChanging(System.Nullable<int> value);
    partial void OnLastUpdatedByChanged();
    #endregion
		
		public Address()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Address", Storage="_Address1", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(250)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlernatePhone", DbType="NVarChar(50)")]
		public string AlernatePhone
		{
			get
			{
				return this._AlernatePhone;
			}
			set
			{
				if ((this._AlernatePhone != value))
				{
					this.OnAlernatePhoneChanging(value);
					this.SendPropertyChanging();
					this._AlernatePhone = value;
					this.SendPropertyChanged("AlernatePhone");
					this.OnAlernatePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreatedUtc", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreatedUtc
		{
			get
			{
				return this._DateCreatedUtc;
			}
			set
			{
				if ((this._DateCreatedUtc != value))
				{
					this.OnDateCreatedUtcChanging(value);
					this.SendPropertyChanging();
					this._DateCreatedUtc = value;
					this.SendPropertyChanged("DateCreatedUtc");
					this.OnDateCreatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLastUpdatedUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateLastUpdatedUtc
		{
			get
			{
				return this._DateLastUpdatedUtc;
			}
			set
			{
				if ((this._DateLastUpdatedUtc != value))
				{
					this.OnDateLastUpdatedUtcChanging(value);
					this.SendPropertyChanging();
					this._DateLastUpdatedUtc = value;
					this.SendPropertyChanged("DateLastUpdatedUtc");
					this.OnDateLastUpdatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int")]
		public System.Nullable<int> LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationRoles")]
	public partial class ApplicationRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ApplicationRole()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationRole_UserRole", Storage="_UserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationRole = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppointmentId;
		
		private int _Designerd;
		
		private int _ClientId;
		
		private System.DateTime _AppointmentTimeUtc;
		
		private bool _IsConfirmed;
		
		private System.DateTime _DateCreatedUtc;
		
		private System.Nullable<System.DateTime> _DateConfirmed;
		
		private bool _IsCanceled;
		
		private decimal _TimeOffset;
		
		private EntitySet<AppointmentComment> _AppointmentComments;
		
		private EntitySet<AppointmentNote> _AppointmentNotes;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Designer> _Designer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentIdChanging(int value);
    partial void OnAppointmentIdChanged();
    partial void OnDesignerdChanging(int value);
    partial void OnDesignerdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnAppointmentTimeUtcChanging(System.DateTime value);
    partial void OnAppointmentTimeUtcChanged();
    partial void OnIsConfirmedChanging(bool value);
    partial void OnIsConfirmedChanged();
    partial void OnDateCreatedUtcChanging(System.DateTime value);
    partial void OnDateCreatedUtcChanged();
    partial void OnDateConfirmedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateConfirmedChanged();
    partial void OnIsCanceledChanging(bool value);
    partial void OnIsCanceledChanged();
    partial void OnTimeOffsetChanging(decimal value);
    partial void OnTimeOffsetChanged();
    #endregion
		
		public Appointment()
		{
			this._AppointmentComments = new EntitySet<AppointmentComment>(new Action<AppointmentComment>(this.attach_AppointmentComments), new Action<AppointmentComment>(this.detach_AppointmentComments));
			this._AppointmentNotes = new EntitySet<AppointmentNote>(new Action<AppointmentNote>(this.attach_AppointmentNotes), new Action<AppointmentNote>(this.detach_AppointmentNotes));
			this._Client = default(EntityRef<Client>);
			this._Designer = default(EntityRef<Designer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppointmentId
		{
			get
			{
				return this._AppointmentId;
			}
			set
			{
				if ((this._AppointmentId != value))
				{
					this.OnAppointmentIdChanging(value);
					this.SendPropertyChanging();
					this._AppointmentId = value;
					this.SendPropertyChanged("AppointmentId");
					this.OnAppointmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designerd", DbType="Int NOT NULL")]
		public int Designerd
		{
			get
			{
				return this._Designerd;
			}
			set
			{
				if ((this._Designerd != value))
				{
					if (this._Designer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignerdChanging(value);
					this.SendPropertyChanging();
					this._Designerd = value;
					this.SendPropertyChanged("Designerd");
					this.OnDesignerdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentTimeUtc", DbType="DateTime NOT NULL")]
		public System.DateTime AppointmentTimeUtc
		{
			get
			{
				return this._AppointmentTimeUtc;
			}
			set
			{
				if ((this._AppointmentTimeUtc != value))
				{
					this.OnAppointmentTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._AppointmentTimeUtc = value;
					this.SendPropertyChanged("AppointmentTimeUtc");
					this.OnAppointmentTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConfirmed", DbType="Bit NOT NULL")]
		public bool IsConfirmed
		{
			get
			{
				return this._IsConfirmed;
			}
			set
			{
				if ((this._IsConfirmed != value))
				{
					this.OnIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsConfirmed = value;
					this.SendPropertyChanged("IsConfirmed");
					this.OnIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreatedUtc", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreatedUtc
		{
			get
			{
				return this._DateCreatedUtc;
			}
			set
			{
				if ((this._DateCreatedUtc != value))
				{
					this.OnDateCreatedUtcChanging(value);
					this.SendPropertyChanging();
					this._DateCreatedUtc = value;
					this.SendPropertyChanged("DateCreatedUtc");
					this.OnDateCreatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateConfirmed", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateConfirmed
		{
			get
			{
				return this._DateConfirmed;
			}
			set
			{
				if ((this._DateConfirmed != value))
				{
					this.OnDateConfirmedChanging(value);
					this.SendPropertyChanging();
					this._DateConfirmed = value;
					this.SendPropertyChanged("DateConfirmed");
					this.OnDateConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCanceled", DbType="Bit NOT NULL")]
		public bool IsCanceled
		{
			get
			{
				return this._IsCanceled;
			}
			set
			{
				if ((this._IsCanceled != value))
				{
					this.OnIsCanceledChanging(value);
					this.SendPropertyChanging();
					this._IsCanceled = value;
					this.SendPropertyChanged("IsCanceled");
					this.OnIsCanceledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOffset", DbType="Decimal(18,2) NOT NULL")]
		public decimal TimeOffset
		{
			get
			{
				return this._TimeOffset;
			}
			set
			{
				if ((this._TimeOffset != value))
				{
					this.OnTimeOffsetChanging(value);
					this.SendPropertyChanging();
					this._TimeOffset = value;
					this.SendPropertyChanged("TimeOffset");
					this.OnTimeOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_AppointmentComment", Storage="_AppointmentComments", ThisKey="AppointmentId", OtherKey="AppointmentId")]
		public EntitySet<AppointmentComment> AppointmentComments
		{
			get
			{
				return this._AppointmentComments;
			}
			set
			{
				this._AppointmentComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_AppointmentNote", Storage="_AppointmentNotes", ThisKey="AppointmentId", OtherKey="AppointmentId")]
		public EntitySet<AppointmentNote> AppointmentNotes
		{
			get
			{
				return this._AppointmentNotes;
			}
			set
			{
				this._AppointmentNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Appointment", Storage="_Client", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designer_Appointment", Storage="_Designer", ThisKey="Designerd", OtherKey="DesignerId", IsForeignKey=true)]
		public Designer Designer
		{
			get
			{
				return this._Designer.Entity;
			}
			set
			{
				Designer previousValue = this._Designer.Entity;
				if (((previousValue != value) 
							|| (this._Designer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designer.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Designer.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._Designerd = value.DesignerId;
					}
					else
					{
						this._Designerd = default(int);
					}
					this.SendPropertyChanged("Designer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppointmentComments(AppointmentComment entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_AppointmentComments(AppointmentComment entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
		
		private void attach_AppointmentNotes(AppointmentNote entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_AppointmentNotes(AppointmentNote entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppointmentComment")]
	public partial class AppointmentComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppointmentCommentId;
		
		private string _Text;
		
		private System.DateTime _CreatedUtc;
		
		private int _AppointmentId;
		
		private int _AccountId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Appointment> _Appointment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentCommentIdChanging(int value);
    partial void OnAppointmentCommentIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCreatedUtcChanging(System.DateTime value);
    partial void OnCreatedUtcChanged();
    partial void OnAppointmentIdChanging(int value);
    partial void OnAppointmentIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    #endregion
		
		public AppointmentComment()
		{
			this._Account = default(EntityRef<Account>);
			this._Appointment = default(EntityRef<Appointment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentCommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppointmentCommentId
		{
			get
			{
				return this._AppointmentCommentId;
			}
			set
			{
				if ((this._AppointmentCommentId != value))
				{
					this.OnAppointmentCommentIdChanging(value);
					this.SendPropertyChanging();
					this._AppointmentCommentId = value;
					this.SendPropertyChanged("AppointmentCommentId");
					this.OnAppointmentCommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedUtc", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedUtc
		{
			get
			{
				return this._CreatedUtc;
			}
			set
			{
				if ((this._CreatedUtc != value))
				{
					this.OnCreatedUtcChanging(value);
					this.SendPropertyChanging();
					this._CreatedUtc = value;
					this.SendPropertyChanged("CreatedUtc");
					this.OnCreatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentId", DbType="Int NOT NULL")]
		public int AppointmentId
		{
			get
			{
				return this._AppointmentId;
			}
			set
			{
				if ((this._AppointmentId != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppointmentIdChanging(value);
					this.SendPropertyChanging();
					this._AppointmentId = value;
					this.SendPropertyChanged("AppointmentId");
					this.OnAppointmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AppointmentComment", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AppointmentComments.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AppointmentComments.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_AppointmentComment", Storage="_Appointment", ThisKey="AppointmentId", OtherKey="AppointmentId", IsForeignKey=true)]
		public Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.AppointmentComments.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.AppointmentComments.Add(this);
						this._AppointmentId = value.AppointmentId;
					}
					else
					{
						this._AppointmentId = default(int);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppointmentNote")]
	public partial class AppointmentNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppointmentNoteId;
		
		private string _Text;
		
		private System.DateTime _CreatedUtc;
		
		private int _AppointmentId;
		
		private EntityRef<Appointment> _Appointment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentNoteIdChanging(int value);
    partial void OnAppointmentNoteIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCreatedUtcChanging(System.DateTime value);
    partial void OnCreatedUtcChanged();
    partial void OnAppointmentIdChanging(int value);
    partial void OnAppointmentIdChanged();
    #endregion
		
		public AppointmentNote()
		{
			this._Appointment = default(EntityRef<Appointment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentNoteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppointmentNoteId
		{
			get
			{
				return this._AppointmentNoteId;
			}
			set
			{
				if ((this._AppointmentNoteId != value))
				{
					this.OnAppointmentNoteIdChanging(value);
					this.SendPropertyChanging();
					this._AppointmentNoteId = value;
					this.SendPropertyChanged("AppointmentNoteId");
					this.OnAppointmentNoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedUtc", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedUtc
		{
			get
			{
				return this._CreatedUtc;
			}
			set
			{
				if ((this._CreatedUtc != value))
				{
					this.OnCreatedUtcChanging(value);
					this.SendPropertyChanging();
					this._CreatedUtc = value;
					this.SendPropertyChanged("CreatedUtc");
					this.OnCreatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentId", DbType="Int NOT NULL")]
		public int AppointmentId
		{
			get
			{
				return this._AppointmentId;
			}
			set
			{
				if ((this._AppointmentId != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppointmentIdChanging(value);
					this.SendPropertyChanging();
					this._AppointmentId = value;
					this.SendPropertyChanged("AppointmentId");
					this.OnAppointmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_AppointmentNote", Storage="_Appointment", ThisKey="AppointmentId", OtherKey="AppointmentId", IsForeignKey=true)]
		public Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.AppointmentNotes.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.AppointmentNotes.Add(this);
						this._AppointmentId = value.AppointmentId;
					}
					else
					{
						this._AppointmentId = default(int);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private int _AccountId;
		
		private int _DesignerId;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Designer> _Designer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnDesignerIdChanging(int value);
    partial void OnDesignerIdChanged();
    #endregion
		
		public Client()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Account = default(EntityRef<Account>);
			this._Designer = default(EntityRef<Designer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignerId", DbType="Int NOT NULL")]
		public int DesignerId
		{
			get
			{
				return this._DesignerId;
			}
			set
			{
				if ((this._DesignerId != value))
				{
					if (this._Designer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignerIdChanging(value);
					this.SendPropertyChanging();
					this._DesignerId = value;
					this.SendPropertyChanged("DesignerId");
					this.OnDesignerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Appointment", Storage="_Appointments", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Client", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designer_Client", Storage="_Designer", ThisKey="DesignerId", OtherKey="DesignerId", IsForeignKey=true)]
		public Designer Designer
		{
			get
			{
				return this._Designer.Entity;
			}
			set
			{
				Designer previousValue = this._Designer.Entity;
				if (((previousValue != value) 
							|| (this._Designer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designer.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Designer.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._DesignerId = value.DesignerId;
					}
					else
					{
						this._DesignerId = default(int);
					}
					this.SendPropertyChanged("Designer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Designer")]
	public partial class Designer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DesignerId;
		
		private int _AccountId;
		
		private EntitySet<WorkSchedule> _WorkSchedules;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<Client> _Clients;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignerIdChanging(int value);
    partial void OnDesignerIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Designer()
		{
			this._WorkSchedules = new EntitySet<WorkSchedule>(new Action<WorkSchedule>(this.attach_WorkSchedules), new Action<WorkSchedule>(this.detach_WorkSchedules));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DesignerId
		{
			get
			{
				return this._DesignerId;
			}
			set
			{
				if ((this._DesignerId != value))
				{
					this.OnDesignerIdChanging(value);
					this.SendPropertyChanging();
					this._DesignerId = value;
					this.SendPropertyChanged("DesignerId");
					this.OnDesignerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designer_WorkSchedule", Storage="_WorkSchedules", ThisKey="DesignerId", OtherKey="DesignerId")]
		public EntitySet<WorkSchedule> WorkSchedules
		{
			get
			{
				return this._WorkSchedules;
			}
			set
			{
				this._WorkSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designer_Appointment", Storage="_Appointments", ThisKey="DesignerId", OtherKey="Designerd")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designer_Client", Storage="_Clients", ThisKey="DesignerId", OtherKey="DesignerId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Designer", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Designers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Designers.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkSchedules(WorkSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Designer = this;
		}
		
		private void detach_WorkSchedules(WorkSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Designer = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Designer = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Designer = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Designer = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Designer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhotoId;
		
		private string _Location;
		
		private int _AccountId;
		
		private System.DateTime _DateCreatedUtc;
		
		private EntitySet<PhotoAlbumItem> _PhotoAlbumItems;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnDateCreatedUtcChanging(System.DateTime value);
    partial void OnDateCreatedUtcChanged();
    #endregion
		
		public Photo()
		{
			this._PhotoAlbumItems = new EntitySet<PhotoAlbumItem>(new Action<PhotoAlbumItem>(this.attach_PhotoAlbumItems), new Action<PhotoAlbumItem>(this.detach_PhotoAlbumItems));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreatedUtc", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreatedUtc
		{
			get
			{
				return this._DateCreatedUtc;
			}
			set
			{
				if ((this._DateCreatedUtc != value))
				{
					this.OnDateCreatedUtcChanging(value);
					this.SendPropertyChanging();
					this._DateCreatedUtc = value;
					this.SendPropertyChanged("DateCreatedUtc");
					this.OnDateCreatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoAlbumItem", Storage="_PhotoAlbumItems", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<PhotoAlbumItem> PhotoAlbumItems
		{
			get
			{
				return this._PhotoAlbumItems;
			}
			set
			{
				this._PhotoAlbumItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Photo", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhotoAlbumItems(PhotoAlbumItem entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_PhotoAlbumItems(PhotoAlbumItem entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoAlbum")]
	public partial class PhotoAlbum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhotoAlbumId;
		
		private string _Title;
		
		private System.DateTime _DateCreatedUtc;
		
		private int _AccountId;
		
		private string _Description;
		
		private bool _IsFeatured;
		
		private bool _isSiteAlbum;
		
		private EntitySet<PhotoAlbumItem> _PhotoAlbumItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoAlbumIdChanging(int value);
    partial void OnPhotoAlbumIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateCreatedUtcChanging(System.DateTime value);
    partial void OnDateCreatedUtcChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsFeaturedChanging(bool value);
    partial void OnIsFeaturedChanged();
    partial void OnisSiteAlbumChanging(bool value);
    partial void OnisSiteAlbumChanged();
    #endregion
		
		public PhotoAlbum()
		{
			this._PhotoAlbumItems = new EntitySet<PhotoAlbumItem>(new Action<PhotoAlbumItem>(this.attach_PhotoAlbumItems), new Action<PhotoAlbumItem>(this.detach_PhotoAlbumItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoAlbumId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhotoAlbumId
		{
			get
			{
				return this._PhotoAlbumId;
			}
			set
			{
				if ((this._PhotoAlbumId != value))
				{
					this.OnPhotoAlbumIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoAlbumId = value;
					this.SendPropertyChanged("PhotoAlbumId");
					this.OnPhotoAlbumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreatedUtc", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreatedUtc
		{
			get
			{
				return this._DateCreatedUtc;
			}
			set
			{
				if ((this._DateCreatedUtc != value))
				{
					this.OnDateCreatedUtcChanging(value);
					this.SendPropertyChanging();
					this._DateCreatedUtc = value;
					this.SendPropertyChanged("DateCreatedUtc");
					this.OnDateCreatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFeatured", DbType="Bit NOT NULL")]
		public bool IsFeatured
		{
			get
			{
				return this._IsFeatured;
			}
			set
			{
				if ((this._IsFeatured != value))
				{
					this.OnIsFeaturedChanging(value);
					this.SendPropertyChanging();
					this._IsFeatured = value;
					this.SendPropertyChanged("IsFeatured");
					this.OnIsFeaturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSiteAlbum", DbType="Bit NOT NULL")]
		public bool isSiteAlbum
		{
			get
			{
				return this._isSiteAlbum;
			}
			set
			{
				if ((this._isSiteAlbum != value))
				{
					this.OnisSiteAlbumChanging(value);
					this.SendPropertyChanging();
					this._isSiteAlbum = value;
					this.SendPropertyChanged("isSiteAlbum");
					this.OnisSiteAlbumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoAlbum_PhotoAlbumItem", Storage="_PhotoAlbumItems", ThisKey="PhotoAlbumId", OtherKey="PhotoAlbumId")]
		public EntitySet<PhotoAlbumItem> PhotoAlbumItems
		{
			get
			{
				return this._PhotoAlbumItems;
			}
			set
			{
				this._PhotoAlbumItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhotoAlbumItems(PhotoAlbumItem entity)
		{
			this.SendPropertyChanging();
			entity.PhotoAlbum = this;
		}
		
		private void detach_PhotoAlbumItems(PhotoAlbumItem entity)
		{
			this.SendPropertyChanging();
			entity.PhotoAlbum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoAlbumItem")]
	public partial class PhotoAlbumItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhotoAlbumItemId;
		
		private int _PhotoAlbumId;
		
		private int _PhotoId;
		
		private string _Title;
		
		private string _Description;
		
		private bool _IsCover;
		
		private EntityRef<Photo> _Photo;
		
		private EntityRef<PhotoAlbum> _PhotoAlbum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoAlbumItemIdChanging(int value);
    partial void OnPhotoAlbumItemIdChanged();
    partial void OnPhotoAlbumIdChanging(int value);
    partial void OnPhotoAlbumIdChanged();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsCoverChanging(bool value);
    partial void OnIsCoverChanged();
    #endregion
		
		public PhotoAlbumItem()
		{
			this._Photo = default(EntityRef<Photo>);
			this._PhotoAlbum = default(EntityRef<PhotoAlbum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoAlbumItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhotoAlbumItemId
		{
			get
			{
				return this._PhotoAlbumItemId;
			}
			set
			{
				if ((this._PhotoAlbumItemId != value))
				{
					this.OnPhotoAlbumItemIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoAlbumItemId = value;
					this.SendPropertyChanged("PhotoAlbumItemId");
					this.OnPhotoAlbumItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoAlbumId", DbType="Int NOT NULL")]
		public int PhotoAlbumId
		{
			get
			{
				return this._PhotoAlbumId;
			}
			set
			{
				if ((this._PhotoAlbumId != value))
				{
					if (this._PhotoAlbum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoAlbumIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoAlbumId = value;
					this.SendPropertyChanged("PhotoAlbumId");
					this.OnPhotoAlbumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", DbType="Int NOT NULL")]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCover", DbType="Bit NOT NULL")]
		public bool IsCover
		{
			get
			{
				return this._IsCover;
			}
			set
			{
				if ((this._IsCover != value))
				{
					this.OnIsCoverChanging(value);
					this.SendPropertyChanging();
					this._IsCover = value;
					this.SendPropertyChanged("IsCover");
					this.OnIsCoverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoAlbumItem", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.PhotoAlbumItems.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.PhotoAlbumItems.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoAlbum_PhotoAlbumItem", Storage="_PhotoAlbum", ThisKey="PhotoAlbumId", OtherKey="PhotoAlbumId", IsForeignKey=true)]
		public PhotoAlbum PhotoAlbum
		{
			get
			{
				return this._PhotoAlbum.Entity;
			}
			set
			{
				PhotoAlbum previousValue = this._PhotoAlbum.Entity;
				if (((previousValue != value) 
							|| (this._PhotoAlbum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhotoAlbum.Entity = null;
						previousValue.PhotoAlbumItems.Remove(this);
					}
					this._PhotoAlbum.Entity = value;
					if ((value != null))
					{
						value.PhotoAlbumItems.Add(this);
						this._PhotoAlbumId = value.PhotoAlbumId;
					}
					else
					{
						this._PhotoAlbumId = default(int);
					}
					this.SendPropertyChanged("PhotoAlbum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserClaims")]
	public partial class UserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public UserClaim()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserClaim", Storage="_Account", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.UserClaims.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.UserClaims.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLogins")]
	public partial class UserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public UserLogin()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserLogin", Storage="_Account", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.UserLogins.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.UserLogins.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoles")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<ApplicationRole> _ApplicationRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UserRole()
		{
			this._Account = default(EntityRef<Account>);
			this._ApplicationRole = default(EntityRef<ApplicationRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._ApplicationRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserRole", Storage="_Account", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationRole_UserRole", Storage="_ApplicationRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public ApplicationRole ApplicationRole
		{
			get
			{
				return this._ApplicationRole.Entity;
			}
			set
			{
				ApplicationRole previousValue = this._ApplicationRole.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationRole.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._ApplicationRole.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("ApplicationRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
